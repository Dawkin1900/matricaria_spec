"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞: Frontend —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
–í–µ—Ä—Å–∏—è: 1.0
"""

import os

import yaml
import streamlit as st
from src.data.get_data import load_data, get_dataset
from src.plotting.eda_charts import barplot_make, cls_example
from src.train.training import start_training
from src.evaluate.evaluate import evaluate_from_file

CONFIG_PATH = "../config/params.yml"


def main_page():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    """
    st.title("MLOps project: Chamomile and its impurities üå∏")
    st.image(
        "https://d2seqvvyy3b8p2.cloudfront.net/47bfefe76db5de7db93be7f983f00223.jpg",
        width=600,
    )

    st.markdown("## –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    st.write(
        """
        –ó–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 
        —Ä–æ–º–∞—à–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ –µ–µ –ø—Ä–∏–º–µ—Å–µ–π –ø–æ —Ñ–æ—Ç–æ."""
    )
    st.write(
        """*–†–æ–º–∞—à–∫–∞ –∞–ø—Ç–µ—á–Ω–∞—è (Matricaria chamomilla)* ‚Äî —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ, 
             —Ü–≤–µ—Ç–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—ã—Ä—å—è
            –∫–∞–∫ –ø—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω–æ–µ –∏ —Å–ø–∞–∑–º–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –ø—Ä–∏
            —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–µ–ª—É–¥–æ—á–Ω–æ-–∫–∏—à–µ—á–Ω–æ–≥–æ —Ç—Ä–∞–∫—Ç–∞, 
            –¥–ª—è –ø–æ–ª–æ—Å–∫–∞–Ω–∏—è —Ä—Ç–∞, –¥–ª—è –∫–ª–∏–∑–º –∏ –≤–∞–Ω–Ω."""
    )
    st.write(
        """
        –ü—Ä–∏ —Å–±–æ—Ä–µ —Ü–≤–µ—Ç–∫–æ–≤ —Ä–æ–º–∞—à–∫–∏ –µ–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π, 
        –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –Ω–µ–µ –ø–æ –≤–Ω–µ—à–Ω–µ–º—É –≤–∏–¥—É. 
        –î–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∞–π–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ 
        –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"""
    )
    st.markdown(
        """
        **–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∑—è—Ç—ã —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—Å—Ç–µ–Ω–∏—è:**
        - –†–æ–º–∞—à–∫–∞ –∞–ø—Ç–µ—á–Ω–∞—è (Matricaria chamomilla);
        - –†–æ–º–∞—à–∫–∞ –Ω–µ–ø–∞—Ö—É—á–∞—è, –∏–ª–∏ –¢—Ä—ë—Ö—Ä—ë–±–µ—Ä–Ω–∏–∫ (Tripleurospermum inodorum);
        - –†–æ–º–∞—à–∫–∞ –ø–∞—Ö—É—á–∞—è (Matricaria discoidea);
        - –≤–∏–¥—ã –ü—É–ø–∞–≤–∫–∏ (Anthemis cotula, Anthemis arvensis, Anthemis ruthenica);
        - –≤–∏–¥—ã –ü–∏—Ä–µ—Ç—Ä—É–º–∞ (Tanacetum parthenium, Tanacetum corymbosum);
        - –ü–æ–ø–æ–≤–Ω–∏–∫, –∏–ª–∏ –ù–∏–≤—è–Ω–∏–∫ (Leucanthemum vulgare).
    """
    )
    st.markdown(
        """
        ## –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–∞–π—Ç–∞ GBIF:
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.5y8e9v
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.mwhkp7
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.qeykw8
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.t7kjqb
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.ag46f4
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.mhzjgg
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.c6phkv
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.fwf425
        - GBIF.org (22 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.6rws37
        - GBIF.org (28 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.vzqpxy
        - GBIF.org (28 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.9qt846
        - GBIF.org (28 March 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.xty8vx
    """
    )
    st.markdown(
        """
        ## –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π
        - img - –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º;
        - label - –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ (*—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è*)
        """
    )


def exploratory():
    """
    Exploratory data analysis
    """
    st.markdown("# Exploratory data analysisÔ∏è")

    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)

    # load and write dataset
    data = get_dataset(dataset_path=config["preprocessing"]["train_path_proc"])
    st.write(data.head())

    # plotting with checkbox
    st.write("**–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏:**")
    class_imbalance = st.checkbox("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤")
    img_exsample = st.checkbox("–ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    if class_imbalance:
        st.pyplot(barplot_make(data=data, target=config["train"]["target_column"]))
        st.markdown(
            """
            **–í—ã–≤–æ–¥:**
            - –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤.
            """
        )
    if img_exsample:
        st.pyplot(
            cls_example(
                data=data, col_img="img", col_cls=config["train"]["target_column"]
            )
        )
        st.markdown(
            """
            **–í—ã–≤–æ–¥:**
            - –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ –≤–Ω–µ—à–Ω–µ–º—É –≤—ã–¥–µ–ª—è—é—Ç—Å—è —Ä–æ–º–∞—à–∫–∞ –ø–∞—Ö—É—á–∞—è (matricaria_discoidea) 
            –∏ –≤–∏–¥—ã –ø–∏—Ä–µ—Ç—Ä—É–º–∞ (pyrethrum_spec);
            - –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ –≤–Ω–µ—à–Ω–µ–º—É —Å—Ö–æ–∂–∏ –≤–∏–¥—ã –ø—É–ø–∞–≤–∫–∏ (anthemis), 
            —Ä–æ–º–∞—à–∫–∞ –∞–ø—Ç–µ—á–Ω–∞—è (matricaria_chamomilla) –∏ —Ç—Ä–µ—Ö—Ä–µ–±–µ—Ä–Ω–∏–∫ (tripleurospermum_inodorum).
            """
        )


def training():
    """
    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
    """
    st.markdown("# Training model")
    # get params
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    # endpoint
    endpoint = config["endpoints"]["train"]

    if st.button("Start training"):
        start_training(config=config, endpoint=endpoint)


def prediction_from_file():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    st.markdown("# Prediction")
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    endpoint = config["endpoints"]["prediction_from_file"]

    upload_file = st.file_uploader(
        "", type=["jpg", "png", "jpeg"], accept_multiple_files=False
    )
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª
    if upload_file:
        image_data = load_data(data=upload_file)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if os.path.exists(config["train"]["model_path"]):
            evaluate_from_file(endpoint=endpoint, image_data=image_data)
        else:
            st.error("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")


def main():
    """
    –°–±–æ—Ä–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ
    """
    page_names_to_funcs = {
        "Project description": main_page,
        "Exploratory data analysis": exploratory,
        "Training model": training,
        "Prediction from file": prediction_from_file,
    }
    selected_page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", page_names_to_funcs.keys())
    page_names_to_funcs[selected_page]()


if __name__ == "__main__":
    main()
